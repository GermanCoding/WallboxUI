"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

def envbool(s, default):
    v = os.getenv(s, default=default)
    if isinstance(v, bool):
        return v
    if v not in ("", "True", "False"):
        raise Exception(f"Unknown boolean: {v}")
    return v == "True"


def envint(s, default):
    v = os.getenv(s, default)
    if v == "None":
        return None
    return int(v)


def envstr(s, default):
    return os.getenv(s, default=default)


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = envstr("SECRET_KEY", 'django-insecure-+qfe#tj92590@@u&=1nza7a7t%-m5p+0t7^t6x)%=3q3x&qwf!')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = envbool("DEBUG", True)

WALLBOX_IP = envstr("WALLBOX_IP", None)

if envstr("ALLOWED_HOSTS", None):
    ALLOWED_HOSTS = envstr("ALLOWED_HOSTS", None).split(",")
if envstr("CSRF_TRUSTED_ORIGINS", None):
    CSRF_TRUSTED_ORIGINS = envstr("CSRF_TRUSTED_ORIGINS", None).split(",")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'rest_framework',
    'knox',
    'django_probes',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

if envstr("DB", None) == "postgres":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "HOST": envstr("DB_HOST", ""),
            "PORT": envstr("DB_PORT", ""),
            "NAME": envstr("DB_NAME", ""),
            "USER": envstr("DB_USER", ""),
            "PASSWORD": envstr("DB_PASSWORD", ""),
            "CONN_MAX_AGE": envstr("DB_CONN_MAX_AGE", None),
            "TEST": {"CHARSET": "UTF8"},
            "OPTIONS": {
                "sslmode": envstr("DB_SSLMODE", "prefer"),
                "target_session_attrs": envstr(
                    "DB_TARGET_SESSION_ATTRS", "read-write"
                ),
            },
        }
    }

if envstr("DB", None) == "mysql":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "HOST": envstr("DB_HOST", ""),
            "PORT": envstr("DB_PORT", ""),
            "NAME": envstr("DB_NAME", ""),
            "USER": envstr("DB_USER", ""),
            "PASSWORD": envstr("DB_PASSWORD", ""),
            "TEST": {"CHARSET": "UTF8"},
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'de-DE'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = '../frontend/django-static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'knox.auth.TokenAuthentication',
    ]
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Wallbox API',
    'DESCRIPTION': 'A small homemade API to view charge session logs from a Keba P-30 Wallbox',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

if envbool("HTTPS", False):
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

HASH_ITERATIONS = envint("HASH_ITERATIONS", 720000)

PASSWORD_HASHERS = [
    "backend.hashers.TunedPBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

LOGOUT_REDIRECT_URL = "/"

HEALTHCHECK_URL = envstr("HEALTHCHECK_URL", None)

if DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
    ]
    CORS_ALLOW_CREDENTIALS = True
